mongodb_express

mongodb@3.x

FORM CREATE 
 DATE BASE CONNECT MONGODB 

 <form action="/register" class="form-control" method="post">

<!-------------------------------------------------------------------------------userregistration--------------------------------------------------------------------------------------->

db.js

const { MongoClient } = require('mongodb');

const url = 'mongodb://127.0.0.1:27017/';
const dbName = 'expmongo';

async function connectToDB() {
  const client = new MongoClient(url, { useNewUrlParser: true, useUnifiedTopology: true });
  try {
    await client.connect();
    const db = client.db(dbName);
    console.log('Connected to MongoDB');
    return db;
  } catch (error) {
    console.error('Error connecting to MongoDB:', error);
    throw error;
  }
}

module.exports = connectToDB;

index.js

var express = require('express');
var router = express.Router();
var connectToDB = require('../db');

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

router.get('/reg', function(req, res, next) {
  res.render('reg');
});

router.post('/regdata', async function(req, res, next) {
  try {
    const db = await connectToDB(); // Wait for the database connection
    var name = req.body.name;
    var address = req.body.address;
    var dob = req.body.dob;
    var email = req.body.email;
    var password = req.body.password;
    var myobj = { name: name, address: address, dob: dob, email: email, password: password };
    await db.collection("newexp").insertOne(myobj);
    console.log("1 data inserted");
    res.redirect('/reg');
  } catch (error) {
    console.error("Error handling registration data:", error);
    res.status(500).send("Internal Server Error");
  }
});

module.exports = router;


<!--------------------------------------------------------------------select quary------------------------------------------------------------------------------------------------------->
/* REGISTER view */

router.get('/Registrerview', async function(req, res,next) {

  const db = await connectToDB();
   await db.collection("registerform").find({}).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
  res.render('Registrerview',{data:result});
});

});


  <or>

router.get('/table',async function(req, res, next) {
  const db = await connectToDB();
  const result=await db.collection("db1").find({}).toArray();
 
// console.log(result);
  res.render('table',{data:result});
});

<!---------------------------------------------------------------------------delete------------------------>
js   (post in the top of js )

const {ObjectId}= require('mongodb')

js

router.get('/delete/:id',async function(req, res, next) {
  const db = await connectToDB();
  var id=req.params.id;
  console.log(id)
  var q={_id: new ObjectId(id) }
  await db.collection("registerform").deleteOne(q,function(err,res){
    if(err) throw err;
    console.log("1 data deleted")
});
res.redirect('/Registrerview')
});

<!---------------------------------------------------------------------------edit------------------------>

*need hbs page 
*call each 
*passid switch 

buy switch mata pagila hbs 
 <a href="/edit/{{this._id}}" class="btn btn-success">edit</a>

hbs

<div class="container w-50">
    <h3 class="text-center" style="color: coral;">Registration table Edit </h3> <br>
       {{#each data}}
       <form action="/edit/{{this._id}}" class="form-control" method="post">

      <input type="text" name="name" placeholder="name" class="form-control"value="{{this.name}}"> <br>
      <input type="email"  class="form-control" name="email" placeholder="email" value="{{this.email}}"> <br>
      <input type="password"  class="form-control" name="password" placeholder="password"  value="{{this.password}}"><br>
      <textarea name="address"   class="form-control">Address {{this.address}}</textarea> <br>

     <label for="gender">gender</label>
     <input type="radio" name="gender" class="form-check-input" value="male">male
     <input type="radio" name="gender" class="form-check-input" value="female">female <br> <br>

     
      <input type="submit" name="submit" class="btn btn-success"  style="margin-right: 50%;">
{{/each}}
</div>
</form>



/* edit select */

js

router.get('/edit/:id',async function(req, res, next) {
  const db = await connectToDB();
  var id=req.params.id;
  var q={_id: new ObjectId(id) }
  await db.collection("registerform").find(q).toArray(function(err,result){
    if (err) throw err;
    console.log(result);
    res.render('edit',{data:result})
  })
});



js <!----------------edit_update----------->


router.post('/edit/:id', async function(req, res, next) {

  const db = await connectToDB(); 
  var id=req.params.id;
  var name = req.body.name;
  var email = req.body.email;
  var password = req.body.password;
  var address = req.body.address;
  var gender = req.body.gender;
  var con={_id: new ObjectId(id) }
  var update = {$set:{name: name, email: email, password: password, address: address, gender: gender}};
  await db.collection("registerform").updateOne(con,update,function(err,res){
    if(err) throw err;
    console.log(res.result.nModified+" updated");
});
res.redirect('/Registrerview')

});

<!-----------------------------------------------------------------------------------SEARCH BOX ------------------------------------------------------------------------------------>

/* Delete */
router.get('/delete/:id',async function(req, res, next) {
  const db = await connectToDB();
  var id=req.params.id;
  console.log(id)
  var q={_id: new ObjectId(id) }
  await db.collection("registerform").deleteOne(q,function(err,res){
    if(err) throw err;
    console.log("1 data deleted")
});
res.redirect('/Registrerview')
});

HBS
 <div class="container w-50">
 <form class="d-flex" action="/search" method="post" role="search">
        <input class="form-control me-2" type="text" placeholder="Search" aria-label="Search"  name="search">
        <button class="btn btn-outline-success" type="submit">Search</button>
      </form>
</div>
<------------------------------------------------------------------------------login with user and admin----------------------------------------------------------------------------->
<!----Login---->

npm install express-session

Get secret key for session (security)


const crypto = require('crypto');
const secretKey = crypto.randomBytes(64).toString('hex');
console.log('Generated secret key:', secretKey);

(////these key paste outside  create a the folder and call as js and run in cmd the (nodefilename)///get a code paste in secret)//
<*** paste this above***)

app.js
const session = require('express-session');

// Set up session
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true
}));


js 

router.get('/login', function(req, res) {
  res.render('login');
});

////login/with user admin//
router.post('/login1', async function(req,res){
const db=await connectToDB();
var email=req.body.email
var password=req.body.password
const v =[{email:email},{password:password}]
const log1= await db.collection("registerform").find({$and:v}).toArray();
if(log1.length>0){
  req.session.email=email
  if(log1[0]['usertype']===1){
   return  res.redirect('/admin')
  }else{
    return res.redirect('/user');
  }
}
 else{
  return res.redirect('/login')
 } 
});

hbs
   <div class="container w-50 mt-4">
   <h3>LOGIN FORM</h3>
   <form method="POST" action="/login1">


    <label for="email">email:</label>
    <input type="email" name="email" id="email"  class="form-control"><br>


    <label for="password">password:</label>
    <input type="password" name="password" id="password" class="form-control" ><br>

    <input type="submit" value="submit" class="btn btn-danger">

</form>
</div>



*then add manually in mongo db user type 1 2 (2 for admin)

*then add in registration page( usertype:2) example below

router.post('/register', async function(req, res, next) {
  try {
    const db = await connectToDB(); 
    var name = req.body.name;
    var email = req.body.email;
    var password = req.body.password;
    var address = req.body.address;
    var gender = req.body.gender;
    var myobj = { name:name, email: email, password: password, address: address, gender: gender ,usertype:2 };
    await db.collection("registerform").insertOne(myobj);
    console.log("1 data inserted");
    res.redirect('/');
  } catch (error) {
    console.error("Error handling registration data:", error);
    res.status(500).send("Internal Server Error");
  }
});
<!------------------------------------------------------------------------------------END------------------------------------------------------------------------------------------>
logout

/* logout */
router.get('/logout', async function(req,res){
  req.session.destroy((err)=>{
    if(err){
      console.log(err);
    }
    res.redirect('/login');
  });
 });

<!-------------------------------------------------------------------------------REGISTER view-----thier address and can edit -------------------------------------------->

/* REGISTER view select uary from registration  */

*new hbs page to user login user login profile updte *
* check  email=req.session.email;  look to main lofin session is email or user 

router.get('/userprofile', async function(req, res,next) {
  const db = await connectToDB();
  email=req.session.user;
   console.log(email)
  var con={email:email}
   await db.collection("registerform").find(con).toArray(function(err, result) {
    if (err) throw err;
    // console.log(result);
  res.render('Registrerview',{data:result});
});
});

hbs 


<div class="container w-50">
    <h3 class="text-center" style="color: coral;">Registration table Edit </h3> <br>
       {{#each data}}
       <form action="/edit/{{this._id}}" class="form-control" method="post">

      <input type="text" name="name" placeholder="name" class="form-control"value="{{this.name}}"> <br>
      <input type="email"  class="form-control" name="email" placeholder="email" value="{{this.email}}"> <br>
      <input type="password"  class="form-control" name="password" placeholder="password"  value="{{this.password}}"><br>
      <textarea name="address" placeholder="address"  class="form-control"> {{this.address}}</textarea> <br>

     <label for="gender">gender</label>
     <input type="radio" name="gender" class="form-check-input" value="male">male
     <input type="radio" name="gender" class="form-check-input" value="female">female <br> <br>

     
      <input type="submit" name="submit" class="btn btn-success"  style="margin-right: 50%;">
{{/each}}
</div>
</form>
