mongodb_express

mongodb@3.x

FORM CREATE 
 DATE BASE CONNECT MONGODB 

 <form action="/register" class="form-control" method="post">

<!-------------------------------------------------------------------------------userregistration--------------------------------------------------------------------------------------->

db.js

const { MongoClient } = require('mongodb');

const url = 'mongodb://127.0.0.1:27017/';
const dbName = 'expmongo';

async function connectToDB() {
  const client = new MongoClient(url, { useNewUrlParser: true, useUnifiedTopology: true });
  try {
    await client.connect();
    const db = client.db(dbName);
    console.log('Connected to MongoDB');
    return db;
  } catch (error) {
    console.error('Error connecting to MongoDB:', error);
    throw error;
  }
}

module.exports = connectToDB;

index.js

var express = require('express');
var router = express.Router();
var connectToDB = require('../db');

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

router.get('/reg', function(req, res, next) {
  res.render('reg');
});

router.post('/regdata', async function(req, res, next) {
  try {
    const db = await connectToDB(); // Wait for the database connection
    var name = req.body.name;
    var address = req.body.address;
    var dob = req.body.dob;
    var email = req.body.email;
    var password = req.body.password;
    var myobj = { name: name, address: address, dob: dob, email: email, password: password };
    await db.collection("newexp").insertOne(myobj);
    console.log("1 data inserted");
    res.redirect('/reg');
  } catch (error) {
    console.error("Error handling registration data:", error);
    res.status(500).send("Internal Server Error");
  }
});

module.exports = router;


<!--------------------------------------------------------------------select quary------------------------------------------------------------------------------------------------------->
/* REGISTER view */

router.get('/Registrerview', async function(req, res,next) {

  const db = await connectToDB();
   await db.collection("registerform").find({}).toArray(function(err, result) {
    if (err) throw err;
    console.log(result);
  res.render('Registrerview',{data:result});
});

});


  <or>

router.get('/table',async function(req, res, next) {
  const db = await connectToDB();
  const result=await db.collection("db1").find({}).toArray();
 
// console.log(result);
  res.render('table',{data:result});
});

<!---------------------------------------------------------------------------delete------------------------>
js   (post in the top of js )

const {ObjectId}= require('mongodb')

js

router.get('/delete/:id',async function(req, res, next) {
  const db = await connectToDB();
  var id=req.params.id;
  console.log(id)
  var q={_id: new ObjectId(id) }
  await db.collection("registerform").deleteOne(q,function(err,res){
    if(err) throw err;
    console.log("1 data deleted")
});
res.redirect('/Registrerview')
});

<!---------------------------------------------------------------------------edit------------------------>

*need hbs page 
*call each 
*passid switch 

buy switch mata pagila hbs 
 <a href="/edit/{{this._id}}" class="btn btn-success">edit</a>

hbs

<div class="container w-50">
    <h3 class="text-center" style="color: coral;">Registration table Edit </h3> <br>
       {{#each data}}
       <form action="/edit/{{this._id}}" class="form-control" method="post">

      <input type="text" name="name" placeholder="name" class="form-control"value="{{this.name}}"> <br>
      <input type="email"  class="form-control" name="email" placeholder="email" value="{{this.email}}"> <br>
      <input type="password"  class="form-control" name="password" placeholder="password"  value="{{this.password}}"><br>
      <textarea name="address"   class="form-control">Address {{this.address}}</textarea> <br>

     <label for="gender">gender</label>
     <input type="radio" name="gender" class="form-check-input" value="male">male
     <input type="radio" name="gender" class="form-check-input" value="female">female <br> <br>

     
      <input type="submit" name="submit" class="btn btn-success"  style="margin-right: 50%;">
{{/each}}
</div>
</form>



/* edit select */

js

router.get('/edit/:id',async function(req, res, next) {
  const db = await connectToDB();
  var id=req.params.id;
  var q={_id: new ObjectId(id) }
  await db.collection("registerform").find(q).toArray(function(err,result){
    if (err) throw err;
    console.log(result);
    res.render('edit',{data:result})
  })
});



js <!----------------edit_update----------->


router.post('/edit/:id', async function(req, res, next) {

  const db = await connectToDB(); 
  var id=req.params.id;
  var name = req.body.name;
  var email = req.body.email;
  var password = req.body.password;
  var address = req.body.address;
  var gender = req.body.gender;
  var con={_id: new ObjectId(id) }
  var update = {$set:{name: name, email: email, password: password, address: address, gender: gender}};
  await db.collection("registerform").updateOne(con,update,function(err,res){
    if(err) throw err;
    console.log(res.result.nModified+" updated");
});
res.redirect('/Registrerview')

});

<!-----------------------------------------------------------------------------------SEARCH BOX ------------------------------------------------------------------------------------>

/* search */
router.post('/search', async function(req,res,next){
  const db = await connectToDB(); 
  var search = req.body.search;
  console.log(search)
  var con={name:search}
  const result12=await db.collection("registerform").find({name:search}).toArray();
  res.render('Registrerview',{data:result12})
  })

HBS
 <div class="container w-50">
 <form class="d-flex" action="/search" method="post" role="search">
        <input class="form-control me-2" type="text" placeholder="Search" aria-label="Search"  name="search">
        <button class="btn btn-outline-success" type="submit">Search</button>
      </form>
</div>



<-------------------------------------------------------------------------------login with user and admin----------------------------------------------------------------------------->
<!----Login---->

npm install express-session

Get secret key for session (security)


const crypto = require('crypto');
const secretKey = crypto.randomBytes(64).toString('hex');
console.log('Generated secret key:', secretKey);

(////these key paste outside  create a the folder and call as js and run in cmd the (nodefilename)///get a code paste in secret)//
<*** paste this above***)

app.js
const session = require('express-session');

// Set up session
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true
}));


js 

router.get('/login', function(req, res) {
  res.render('login');
});

////login/with user admin//
router.post('/login1', async function(req,res){
const db=await connectToDB();
var email=req.body.email
var password=req.body.password
const v =[{email:email},{password:password}]
const log1= await db.collection("registerform").find({$and:v}).toArray();
if(log1.length>0){
  req.session.email=email
  if(log1[0]['usertype']===1){
   return  res.redirect('/admin')
  }else{
    return res.redirect('/user');
  }
}
 else{
  return res.redirect('/login')
 } 
});

hbs
   <div class="container w-50 mt-4">
   <h3>LOGIN FORM</h3>
   <form method="POST" action="/login1">


    <label for="email">email:</label>
    <input type="email" name="email" id="email"  class="form-control"><br>


    <label for="password">password:</label>
    <input type="password" name="password" id="password" class="form-control" ><br>

    <input type="submit" value="submit" class="btn btn-danger">

</form>
</div>



*then add manually in mongo db user type 1 2 (2 for admin)

*then add in registration page( usertype:2) example below

router.post('/register', async function(req, res, next) {
  try {
    const db = await connectToDB(); 
    var name = req.body.name;
    var email = req.body.email;
    var password = req.body.password;
    var address = req.body.address;
    var gender = req.body.gender;
    var myobj = { name:name, email: email, password: password, address: address, gender: gender ,usertype:2 };
    await db.collection("registerform").insertOne(myobj);
    console.log("1 data inserted");
    res.redirect('/');
  } catch (error) {
    console.error("Error handling registration data:", error);
    res.status(500).send("Internal Server Error");
  }
});
<!------------------------------------------------------------------------------------END------------------------------------------------------------------------------------------>
logout

/* logout */
router.get('/logout', async function(req,res){
  req.session.destroy((err)=>{
    if(err){
      console.log(err);
    }
    res.redirect('/login');
  });
 });

<!-------------------------------------------------------------------------------REGISTER view-----thier address and can edit -------------------------------------------->

/* REGISTER view select uary from registration  */

*new hbs page to user login user login profile updte *
*write this code inside
* check  email=req.session.email;  look to main lofin session is email or user 



router.get('/userprofile', async function(req, res,next) {
  const db = await connectToDB();
  email=req.session.user;
   console.log(email)
  var con={email:email}
   await db.collection("registerform").find(con).toArray(function(err, result) {
    if (err) throw err;
    // console.log(result);
  res.render('Registrerview',{data:result});
});
});

hbs 

<div class="container w-50">
    <h3 class="text-center" style="color: coral;">Registration table Edit </h3> <br>
       {{#each data}}
       <form action="/edit/{{this._id}}" class="form-control" method="post">

      <input type="text" name="name" placeholder="name" class="form-control"value="{{this.name}}"> <br>
      <input type="email"  class="form-control" name="email" placeholder="email" value="{{this.email}}"> <br>
      <input type="password"  class="form-control" name="password" placeholder="password"  value="{{this.password}}"><br>
      <textarea name="address" placeholder="address"  class="form-control"> {{this.address}}</textarea> <br>

     <label for="gender">gender</label>
     <input type="radio" name="gender" class="form-check-input" value="male">male
     <input type="radio" name="gender" class="form-check-input" value="female">female <br> <br>

     
      <input type="submit" name="submit" class="btn btn-success"  style="margin-right: 50%;">
{{/each}}
</div>
</form>
##############################################################################################################################################################################

Student Management System

Student Management System is software which is helpful for students as well as the school authorities. In the current system all the activities are done manually. 
Its time saving and scalable. Our Student Management System deals with the various activities related to the students  

In the software we can register as a user and user has two types student and administrator. Administrator has the power to add new user and can edit the students details entered. 
A admin can add students record ,attendance status with department wise.
All students can search his/her basics details and attendance status with there respective roll numbers.


<!---------only main things noted in note pad----------------->

some ids call in registration page eg below:=====

router.post('/register', async function(req, res, next) {
  try {
    const db = await connectToDB(); 
    var fristname = req.body.fristname;
    var address = req.body.address;
    var gender = req.body.gender;
    var rollnumber = req.body.rollnumber;
    var department = req.body.department;
    var date = req.body.date;
    var email = req.body.email;
    var password = req.body.password;
    var myobj = { fristname:fristname, address: address, gender: gender, rollnumber: rollnumber, department: department, date: date , email: email, password: password ,usertype:2, attendence:0,present:0,absent:0 };
    await db.collection("studentmanagement").insertOne(myobj);
    console.log("1 data inserted");
    res.redirect('/');
  } catch (error) {
    console.error("Error handling registration data:", error);
    res.status(500).send("Internal Server Error");
  }
});

<!-------------------------attendence page show in user -------------------------------------------.>

js 
/*attendence page*/
router.get('/attendence', async function(req, res){
  const db = await connectToDB();
  await db.collection("studentmanagement").find({}).toArray(function(err, result){
    if (err) throw err;
  res.render('attendence',{data:result});
});
});


hbs

<table border="1" class="mt-3 ">
<form action="/present" class="form-control" method="post"> 
<tr>
    <th>fristname</th>
    <th>rollnumber</th>
    <th>department</th>
    <th>date</th>
    <th>result</th>
</tr>
{{#each data}}
<tr>
    <td>{{this.fristname}}</td>
    <td>{{this.rollnumber}}</td>
    <td>{{this.department}}</td>
    <td>{{this.date}}</td> 
    <td>
    <a href="/present/{{this._id}}" class="btn btn-success">Present</a>
    <a href="/absent/{{this._id}}" class="btn btn-danger">absent</a>
    </td>
</tr>
{{/each}}
</table>
</form>


in db create new colllection name attendence =>/(student managment is student regpage )
quary for insert absent present in new collecton


router.get('/absent/:_id',async function(req,res,next){
  const db = await connectToDB();
  var id=req.params._id;
  var qry ={_id:new ObjectId(id)};
  var date=new Date();

  var att='absent';
  var t=await db.collection('studentmanagement').find(qry).toArray();
  // console.log(t)
  var total=t[0]['absent']
  var totalap=parseInt(t[0]['present'])

  totala=parseInt(total+1);
  var tadtence =parseInt(totala+totalap)
  var obj={sid:id,date:date,attendence:att};

  await db.collection('attendence').insertOne(obj);
  var val={$set:{absent:totala,attendence:tadtence}}
  await db.collection('studentmanagement').updateOne(qry,val);
  res.redirect('/attendence');
})
///////////////////////////////////////////////////////////////

router.get('/present/:_id',async function(req,res,next){
  const db = await connectToDB();
  var id=req.params._id;
  var qry ={_id:new ObjectId(id)};
  var date=new Date();

  var att='present';
  var t=await db.collection('studentmanagement').find(qry).toArray();
  // console.log(t)
  var total=t[0]['present']
  var totalap=parseInt(t[0]['present'])

  totala=parseInt(total+1);

  var tadtence =parseInt(t[0]['attendence']+1)
  // var tadtence =parseInt(totala+totalap)
  
  var obj={sid:id,date:date,attendence:att};

  await db.collection('attendence').insertOne(obj);
  var val={$set:{present:totala,attendence:tadtence}}
  await db.collection('studentmanagement').updateOne(qry,val);
  res.redirect('/attendence');
})


inserted you can see in collection output :example below

_id:64fb37032d2c633eb854461f
sid:"64fb217ad624821408f093aa"
date:2023-09-08T15:00:19.035+00:00
attendence:"present"

<!------------------------------------------------------------------------------------------------------------------------------------------------------------------------>



/*   */
router.get('/attendence1',async function(req, res, next) {
  const db = await connectToDB();
 email=req.session.email
  var q={email:email }
  // con=[{sid:new ObjectId(id)},{attendence:'present'}]
//
  await db.collection("studentmanagement").find(q).toArray( async function(err,result){
    if (err) throw err;
  
    var id=result[0]['_id'].toString()
    console.log(id);
    con=[{sid:id},{attendence:"present"}]
    con1=[{sid:id},{attendence:"absent"}]
   
    await db.collection("attendence").find({$and:con}).toArray( async function(err,result1){
      await db.collection("attendence").find({$and:con1}).toArray(function(err,result2){

      // console.log(result1);
    res.render('attendence1',{data:result,presentcount:result1,absent:result2})
  })
});
});
})



hbs

*this select from hbs page registration(akatan namal present absent vachiricuna)

<h1>ATTENDENCE</h1>
{{#each data}}
<table style="width:100%">
  <tr>
    <th>rollnumber</th> 
    <th>present</th> 
    <th>absent</th>
     <th>total working days</th>
  </tr>
  <tr>
    <td>{{this.rollnumber}}</td>
    <td>{{this.present}}</td>
    <td>{{this.absent}}</td>
    <td>{{this.attendence}}</td>
  </tr>

</table> <br> <br>
{{/each}}


***this present absent from database attendence store akuna present asent date show chayan ***

<h1>present </h1>
{{#each presentcount}}
<table style="width:100%">
  <tr>
    {{!-- <th>present</th>  --}}
  </tr>
  <tr>
    <td>{{this.date}}</td>
  </tr>
</table>
{{/each}}
 <br> <br>


<h1> Absent</h1>
{{#each absent}}

<table style="width:100%">
  <tr>
    {{!-- <th>absent</th>  --}}
  </tr>
  <tr>
    <td>{{this.date}}</td>
  </tr>
</table>
{{/each}}





